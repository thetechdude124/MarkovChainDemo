{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mindf\\\\Documents\\\\PROFESSIONAL\\\\WORK\\\\RESEARCH\\\\visualizing_n_grams\\\\src\\\\Generate_Dict.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport axios from \"axios\";\nimport DisplayDict from \"./Display_Dict\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = \"http://localhost:3001\";\nexport default function GenerateDict() {\n  _s();\n  //Model type\n  let [model_type, setModelType] = useState(\"Bi-gram\");\n  //Input text\n  let [input_text, setInputText] = useState(\"\");\n  //N-gram dictionary\n  let [returned_dict, setReturnedDict] = useState({});\n  //Branching factor and length of dictionary (to diisplay as statistics)\n  let [branching_factor, setBranchingFactor] = useState(0);\n  let [len_dict, setLenDict] = useState(0);\n  //Button clicked state\n  let [dictGenerated, setDictGenerated] = useState(false);\n  //Text provided state\n  let [textProvided, setTextProvided] = useState(true);\n\n  //When text is entered into the textarea\n  const textRetrieval = text => {\n    //Set input text\n    setInputText(text.target.value);\n  };\n\n  //When a model option is selected\n  const modelSelect = selection => {\n    console.log(model_type);\n    //Save model type\n    setModelType(selection.target.value);\n    console.log(selection.target.value);\n  };\n\n  //Post to the backend API and retrieve the generated dictionary, branching factor, and total number of entries.\n  const generate_ngram_dict = async () => {\n    //Send a POST request to the backend with the input text and model type\n    const postText = {\n      \"input_text\": input_text,\n      \"n_gram_type\": model_type\n    };\n    console.log(\"API Input text\", input_text);\n    //Post configuration\n    const postConfig = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    //Post\n    const response = await axios.post(\"/generate-ngram-dictionary\", postText, postConfig);\n    //Set bigram dictionary\n    setReturnedDict(response.data[\"gram_dict\"]);\n    //Set branching factor\n    setBranchingFactor(response.data[\"b_factor\"]);\n    //Set dict length\n    setLenDict(response.data[\"n_entries\"]);\n  };\n\n  //When the \"Build Dictionary\" Button is clicked. \n  const build_dictionary = () => {\n    //Check if input text has been provided\n    console.log(\"PRE LOGIC\", input_text);\n    //Check if the number of words is greater than or equal to two\n    if (input_text.split(' ').filter(word => word !== '').length >= 2) {\n      //Set text state to true\n      setTextProvided(true);\n      //Obtain dictionary, branching factor, and number of entries\n      console.log(\"INSIDE\", input_text);\n      generate_ngram_dict();\n      //Open a seperate window\n      const dict_window = window.open('', '_blank');\n      dict_window.document.title = \"N-Gram Dictionary and Statistics.\";\n      dict_window.document.body.innerHTML = \"<div id = 'root_div' className = 'dict-page' class = 'flex flex-col h-screen w-screen items-center justify-center py-8'></div>\";\n      //Render the child component in the new window\n      console.log(\"RETURNED DICT\", returned_dict);\n      ReactDOM.render( /*#__PURE__*/_jsxDEV(DisplayDict, {\n        dict: returned_dict,\n        branching_factor: branching_factor,\n        num_entries: len_dict\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 29\n      }, this), dict_window.document.getElementById('root_div'));\n      //Set the dictionary generation state to true\n      setDictGenerated(true);\n    } else {\n      //Set the state to false and display the error message\n      setTextProvided(false);\n      setDictGenerated(false);\n    }\n  };\n\n  //HTML\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-processing\",\n    class: \"flex flex-col space-y-5 h-3/6 w-full items-center justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-entrance-text\",\n      class: \"font-bold\",\n      children: \"Enter a sample passage below and choose an n-gram model to get started:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"gram-model-text\",\n      type: \"textarea\",\n      defaultValue: \"Paste your passage here...\",\n      onChange: textRetrieval,\n      class: \"rounded-md p-2 h-5/6 w-8/12 outline outline-slate-200 focus:outline-none focus:ring focus:border-slate-500 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"n-gram-selection\",\n      class: \"flex flex-row space-x-4 w-3/6 align-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"\",\n        children: \"Select n-gram type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"n-gram-model-type\",\n        id: \"n-gram-model-type\",\n        defaultValue: \"bi-gram\",\n        onChange: modelSelect,\n        class: \"h-fit w-2/6 rounded-md outline outline-slate-200 outline-3 focus:outline-none focus:ring text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Bi-gram\"\n        }, \"bi-gram\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Tri-gram\"\n        }, \"tri-gram\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Tetra-gram\"\n        }, \"tetra-gram\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"build-ngram-dict\",\n      onClick: build_dictionary,\n      class: \"bg-black text-white font-bold rounded-md w-2/12 h-10 outline outline-1 hover:bg-slate-700 hover:ring\",\n      children: \"Build Dictionary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this), textProvided ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-text-provided\",\n      class: \"text-red-500 font-bold\",\n      children: \"Please provide a sample input passage with at least 2 words.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 9\n  }, this);\n}\n_s(GenerateDict, \"0XdZENk0rYc6rk1L9/VGPlw1J7M=\");\n_c = GenerateDict;\nvar _c;\n$RefreshReg$(_c, \"GenerateDict\");","map":{"version":3,"names":["React","useState","useEffect","Component","ReactDOM","axios","DisplayDict","jsxDEV","_jsxDEV","defaults","baseURL","GenerateDict","_s","model_type","setModelType","input_text","setInputText","returned_dict","setReturnedDict","branching_factor","setBranchingFactor","len_dict","setLenDict","dictGenerated","setDictGenerated","textProvided","setTextProvided","textRetrieval","text","target","value","modelSelect","selection","console","log","generate_ngram_dict","postText","postConfig","headers","response","post","data","build_dictionary","split","filter","word","length","dict_window","window","open","document","title","body","innerHTML","render","dict","num_entries","fileName","_jsxFileName","lineNumber","columnNumber","getElementById","className","class","children","type","defaultValue","onChange","name","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mindf/Documents/PROFESSIONAL/WORK/RESEARCH/visualizing_n_grams/src/Generate_Dict.js"],"sourcesContent":["import React, {useState, useEffect, Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport axios from \"axios\";\r\nimport DisplayDict from \"./Display_Dict\";\r\naxios.defaults.baseURL = \"http://localhost:3001\"\r\n\r\nexport default function GenerateDict(){\r\n    //Model type\r\n    let [model_type, setModelType] = useState(\"Bi-gram\");\r\n    //Input text\r\n    let [input_text, setInputText] = useState(\"\");\r\n    //N-gram dictionary\r\n    let [returned_dict, setReturnedDict] = useState({})\r\n    //Branching factor and length of dictionary (to diisplay as statistics)\r\n    let [branching_factor, setBranchingFactor] = useState(0);\r\n    let [len_dict, setLenDict] = useState(0);\r\n    //Button clicked state\r\n    let [dictGenerated, setDictGenerated] = useState(false);\r\n    //Text provided state\r\n    let [textProvided, setTextProvided] = useState(true);\r\n\r\n    //When text is entered into the textarea\r\n    const textRetrieval = (text) => {\r\n        //Set input text\r\n        setInputText(text.target.value)\r\n    }\r\n\r\n    //When a model option is selected\r\n    const modelSelect = (selection) => {\r\n        console.log(model_type);\r\n        //Save model type\r\n        setModelType(selection.target.value);\r\n        console.log(selection.target.value);\r\n    }\r\n\r\n    //Post to the backend API and retrieve the generated dictionary, branching factor, and total number of entries.\r\n    const generate_ngram_dict = async () => {\r\n        //Send a POST request to the backend with the input text and model type\r\n        const postText = {\r\n            \"input_text\" : input_text,\r\n            \"n_gram_type\" : model_type,\r\n        };\r\n        console.log(\"API Input text\", input_text)\r\n        //Post configuration\r\n        const postConfig = {\r\n            headers : {\r\n                \"Content-Type\" : \"application/json\",\r\n            },\r\n        };\r\n        //Post\r\n        const response = await axios.post(\"/generate-ngram-dictionary\", postText, postConfig)\r\n        //Set bigram dictionary\r\n        setReturnedDict(response.data[\"gram_dict\"]);\r\n        //Set branching factor\r\n        setBranchingFactor(response.data[\"b_factor\"]);\r\n        //Set dict length\r\n        setLenDict(response.data[\"n_entries\"]);\r\n    };\r\n\r\n    //When the \"Build Dictionary\" Button is clicked. \r\n    const build_dictionary = () => {\r\n        //Check if input text has been provided\r\n        console.log(\"PRE LOGIC\", input_text);\r\n        //Check if the number of words is greater than or equal to two\r\n        if (input_text.split(' ').filter(word => word !== '').length >= 2) {\r\n            //Set text state to true\r\n            setTextProvided(true);\r\n            //Obtain dictionary, branching factor, and number of entries\r\n            console.log(\"INSIDE\", input_text);\r\n            generate_ngram_dict();\r\n            //Open a seperate window\r\n            const dict_window = window.open('', '_blank');\r\n            dict_window.document.title = \"N-Gram Dictionary and Statistics.\";\r\n            dict_window.document.body.innerHTML = \"<div id = 'root_div' className = 'dict-page' class = 'flex flex-col h-screen w-screen items-center justify-center py-8'></div>\";\r\n            //Render the child component in the new window\r\n            console.log(\"RETURNED DICT\", returned_dict)\r\n            ReactDOM.render(<DisplayDict dict = {returned_dict} branching_factor = {branching_factor} num_entries = {len_dict}/>, dict_window.document.getElementById('root_div'))\r\n            //Set the dictionary generation state to true\r\n            setDictGenerated(true);\r\n        } else {\r\n            //Set the state to false and display the error message\r\n            setTextProvided(false);\r\n            setDictGenerated(false);\r\n        }\r\n\r\n    }   \r\n\r\n\r\n    //HTML\r\n    return (\r\n        <div className = \"text-processing\" class = \"flex flex-col space-y-5 h-3/6 w-full items-center justify-center\" >\r\n          <p className = \"text-entrance-text\" class = \"font-bold\">Enter a sample passage below and choose an n-gram model to get started:</p>\r\n          <textarea className = \"gram-model-text\" type = \"textarea\" defaultValue = \"Paste your passage here...\" onChange = {textRetrieval} class = \"rounded-md p-2 h-5/6 w-8/12 outline outline-slate-200 focus:outline-none focus:ring focus:border-slate-500 \"></textarea>\r\n          <div className = \"n-gram-selection\" class = \"flex flex-row space-x-4 w-3/6 align-center justify-center\">\r\n            <label class = \"\">Select n-gram type:</label>\r\n              <select name = \"n-gram-model-type\" id = \"n-gram-model-type\" defaultValue = \"bi-gram\" onChange = {modelSelect} class = \"h-fit w-2/6 rounded-md outline outline-slate-200 outline-3 focus:outline-none focus:ring text-center\">\r\n                <option key = \"bi-gram\">Bi-gram</option>\r\n                <option key = \"tri-gram\">Tri-gram</option>\r\n                <option key = \"tetra-gram\">Tetra-gram</option>\r\n              </select>\r\n          </div>\r\n          <button className = \"build-ngram-dict\" onClick = {build_dictionary} class = \"bg-black text-white font-bold rounded-md w-2/12 h-10 outline outline-1 hover:bg-slate-700 hover:ring\">Build Dictionary</button>\r\n          {/* Display the text generation option if clicked is true*/}\r\n          {textProvided ? (\r\n            <div></div>\r\n          ) : (\r\n            <div className = \"no-text-provided\" class = \"text-red-500 font-bold\">Please provide a sample input passage with at least 2 words.</div>\r\n          )}\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}