{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mindf\\\\Documents\\\\PROFESSIONAL\\\\WORK\\\\RESEARCH\\\\visualizing_n_grams\\\\src\\\\Generate_Dict.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport axios from \"axios\";\nimport DisplayDict from \"./Display_Dict\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.baseURL = \"http://localhost:3001\";\nexport default function GenerateDict() {\n  _s();\n  //Model type\n  let [model_type, setModelType] = useState(\"Bi-gram\");\n  //Input text\n  let [input_text, setInputText] = useState(\"\");\n  //N-gram dictionary\n  let [returned_dict, setReturnedDict] = useState({});\n  //Branching factor and length of dictionary (to diisplay as statistics)\n  let [branching_factor, setBranchingFactor] = useState(0);\n  let [len_dict, setLenDict] = useState(0);\n  //Button clicked state\n  let [clicked, setClicked] = useState(false);\n  //When text is entered into the textarea\n  const textRetrieval = text => {\n    //Set input text\n    setInputText(text.target.value);\n  };\n  //When a model option is selected\n  const modelSelect = selection => {\n    console.log(model_type);\n    //Save model type\n    setModelType(selection.target.value);\n    console.log(selection.target.value);\n  };\n\n  //Post to the backend API and retrieve the generated dictionary, branching factor, and total number of entries.\n  const generate_ngram_dict = () => {\n    //Send a POST request to the backend with the input text and model type\n    const postText = {\n      \"input_text\": input_text,\n      \"n_gram_type\": model_type\n    };\n    //Post configuration\n    const postConfig = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    //Post\n    axios.post(\"/generate-ngram-dictionary\", postText, postConfig).then(response => {\n      //Set bigram dictionary\n      setReturnedDict(response.data[\"gram_dict\"]);\n      //Set branching factor\n      setBranchingFactor(response.data[\"b_factor\"]);\n      //Set dict length\n      setLenDict(response.data[\"n_entries\"]);\n      console.log(response.data);\n      setClicked(true);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  //When the \"Build Dictionary\" Button is clicked. \n  const build_dictionary = () => {\n    //Obtain dictionary, branching factor, and number of entries\n    generate_ngram_dict();\n    //Open a seperate window\n    const dict_window = window.open('', '');\n    dict_window.title = \"N-Gram Dictionary and Statistics.\";\n    dict_window.body.innerHTML = \"<div id = 'root_div'></div>\";\n    //Render the child component in the new window\n    ReactDOM.render( /*#__PURE__*/_jsxDEV(DisplayDict, {\n      dict: returned_dict,\n      branching_factor: branching_factor,\n      num_entries: len_dict\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }, this), dict_window.document.getElementById('root'));\n  };\n\n  //HTML\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-processing\",\n    class: \"flex flex-col space-y-5 h-3/6 w-full items-center justify-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-entrance-text\",\n      class: \"font-bold\",\n      children: \"Enter a sample passage below and choose an n-gram model to get started:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"gram-model-text\",\n      type: \"textarea\",\n      defaultValue: \"Paste your passage here...\",\n      onChange: textRetrieval,\n      class: \"rounded-md p-2 h-5/6 w-8/12 outline outline-slate-200 focus:outline-none focus:ring focus:border-slate-500 \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"n-gram-selection\",\n      class: \"flex flex-row space-x-4 w-3/6 align-center justify-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"\",\n        children: \"Select n-gram type:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"n-gram-model-type\",\n        id: \"n-gram-model-type\",\n        defaultValue: \"bi-gram\",\n        onChange: modelSelect,\n        class: \"h-fit w-2/6 rounded-md outline outline-slate-200 outline-3 focus:outline-none focus:ring text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Bi-gram\"\n        }, \"bi-gram\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Tri-gram\"\n        }, \"tri-gram\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Tetra-gram\"\n        }, \"tetra-gram\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"build-ngram-dict\",\n      onClick: build_dictionary,\n      class: \"bg-black text-white font-bold rounded-md w-2/12 h-10 outline outline-1 hover:bg-slate-700 hover:ring\",\n      children: \"Build Dictionary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}\n_s(GenerateDict, \"OZ7FbQslfV11La0KRdESd7WktJo=\");\n_c = GenerateDict;\nvar _c;\n$RefreshReg$(_c, \"GenerateDict\");","map":{"version":3,"names":["React","useState","useEffect","Component","ReactDOM","axios","DisplayDict","jsxDEV","_jsxDEV","defaults","baseURL","GenerateDict","_s","model_type","setModelType","input_text","setInputText","returned_dict","setReturnedDict","branching_factor","setBranchingFactor","len_dict","setLenDict","clicked","setClicked","textRetrieval","text","target","value","modelSelect","selection","console","log","generate_ngram_dict","postText","postConfig","headers","post","then","response","data","catch","error","build_dictionary","dict_window","window","open","title","body","innerHTML","render","dict","num_entries","fileName","_jsxFileName","lineNumber","columnNumber","document","getElementById","className","class","children","type","defaultValue","onChange","name","id","onClick","_c","$RefreshReg$"],"sources":["C:/Users/mindf/Documents/PROFESSIONAL/WORK/RESEARCH/visualizing_n_grams/src/Generate_Dict.js"],"sourcesContent":["import React, {useState, useEffect, Component} from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport axios from \"axios\";\r\nimport DisplayDict from \"./Display_Dict\";\r\naxios.defaults.baseURL = \"http://localhost:3001\"\r\n\r\nexport default function GenerateDict(){\r\n    //Model type\r\n    let [model_type, setModelType] = useState(\"Bi-gram\");\r\n    //Input text\r\n    let [input_text, setInputText] = useState(\"\");\r\n    //N-gram dictionary\r\n    let [returned_dict, setReturnedDict] = useState({})\r\n    //Branching factor and length of dictionary (to diisplay as statistics)\r\n    let [branching_factor, setBranchingFactor] = useState(0);\r\n    let [len_dict, setLenDict] = useState(0);\r\n    //Button clicked state\r\n    let [clicked, setClicked] = useState(false);\r\n    //When text is entered into the textarea\r\n    const textRetrieval = (text) => {\r\n        //Set input text\r\n        setInputText(text.target.value)\r\n    }\r\n    //When a model option is selected\r\n    const modelSelect = (selection) => {\r\n        console.log(model_type);\r\n        //Save model type\r\n        setModelType(selection.target.value);\r\n        console.log(selection.target.value);\r\n    }\r\n\r\n    //Post to the backend API and retrieve the generated dictionary, branching factor, and total number of entries.\r\n    const generate_ngram_dict = () => {\r\n        //Send a POST request to the backend with the input text and model type\r\n        const postText = {\r\n            \"input_text\" : input_text,\r\n            \"n_gram_type\" : model_type,\r\n        };\r\n        //Post configuration\r\n        const postConfig = {\r\n            headers : {\r\n                \"Content-Type\" : \"application/json\",\r\n            },\r\n        };\r\n        //Post\r\n        axios.post(\"/generate-ngram-dictionary\", postText, postConfig)\r\n        .then((response) => {\r\n            //Set bigram dictionary\r\n            setReturnedDict(response.data[\"gram_dict\"]);\r\n            //Set branching factor\r\n            setBranchingFactor(response.data[\"b_factor\"]);\r\n            //Set dict length\r\n            setLenDict(response.data[\"n_entries\"]);\r\n            console.log(response.data)\r\n            setClicked(true);\r\n        }).catch((error) => {\r\n            console.log(error)\r\n        })\r\n    };\r\n\r\n    //When the \"Build Dictionary\" Button is clicked. \r\n    const build_dictionary = () => {\r\n        //Obtain dictionary, branching factor, and number of entries\r\n        generate_ngram_dict();\r\n        //Open a seperate window\r\n        const dict_window = window.open('', '');\r\n        dict_window.title = \"N-Gram Dictionary and Statistics.\";\r\n        dict_window.body.innerHTML = \"<div id = 'root_div'></div>\";\r\n        //Render the child component in the new window\r\n        ReactDOM.render(<DisplayDict dict = {returned_dict} branching_factor = {branching_factor} num_entries = {len_dict}/>, dict_window.document.getElementById('root'))\r\n\r\n    }\r\n\r\n    //HTML\r\n    return (\r\n        <div className = \"text-processing\" class = \"flex flex-col space-y-5 h-3/6 w-full items-center justify-center\" >\r\n          <p className = \"text-entrance-text\" class = \"font-bold\">Enter a sample passage below and choose an n-gram model to get started:</p>\r\n          <textarea className = \"gram-model-text\" type = \"textarea\" defaultValue = \"Paste your passage here...\" onChange = {textRetrieval} class = \"rounded-md p-2 h-5/6 w-8/12 outline outline-slate-200 focus:outline-none focus:ring focus:border-slate-500 \"></textarea>\r\n          <div className = \"n-gram-selection\" class = \"flex flex-row space-x-4 w-3/6 align-center justify-center\">\r\n            <label class = \"\">Select n-gram type:</label>\r\n              <select name = \"n-gram-model-type\" id = \"n-gram-model-type\" defaultValue = \"bi-gram\" onChange = {modelSelect} class = \"h-fit w-2/6 rounded-md outline outline-slate-200 outline-3 focus:outline-none focus:ring text-center\">\r\n                <option key = \"bi-gram\">Bi-gram</option>\r\n                <option key = \"tri-gram\">Tri-gram</option>\r\n                <option key = \"tetra-gram\">Tetra-gram</option>\r\n              </select>\r\n          </div>\r\n          <button className = \"build-ngram-dict\" onClick = {build_dictionary} class = \"bg-black text-white font-bold rounded-md w-2/12 h-10 outline outline-1 hover:bg-slate-700 hover:ring\">Build Dictionary</button>\r\n          {/* Display dictionary if clicked is true */}\r\n          \r\n        </div>\r\n    )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,EAAEC,SAAS,QAAO,OAAO;AAC3D,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACzCH,KAAK,CAACI,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAEhD,eAAe,SAASC,YAAYA,CAAA,EAAE;EAAAC,EAAA;EAClC;EACA,IAAI,CAACC,UAAU,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,SAAS,CAAC;EACpD;EACA,IAAI,CAACc,UAAU,EAAEC,YAAY,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC7C;EACA,IAAI,CAACgB,aAAa,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnD;EACA,IAAI,CAACkB,gBAAgB,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC;EACxD,IAAI,CAACoB,QAAQ,EAAEC,UAAU,CAAC,GAAGrB,QAAQ,CAAC,CAAC,CAAC;EACxC;EACA,IAAI,CAACsB,OAAO,EAAEC,UAAU,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC3C;EACA,MAAMwB,aAAa,GAAIC,IAAI,IAAK;IAC5B;IACAV,YAAY,CAACU,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EACD;EACA,MAAMC,WAAW,GAAIC,SAAS,IAAK;IAC/BC,OAAO,CAACC,GAAG,CAACnB,UAAU,CAAC;IACvB;IACAC,YAAY,CAACgB,SAAS,CAACH,MAAM,CAACC,KAAK,CAAC;IACpCG,OAAO,CAACC,GAAG,CAACF,SAAS,CAACH,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;;EAED;EACA,MAAMK,mBAAmB,GAAGA,CAAA,KAAM;IAC9B;IACA,MAAMC,QAAQ,GAAG;MACb,YAAY,EAAGnB,UAAU;MACzB,aAAa,EAAGF;IACpB,CAAC;IACD;IACA,MAAMsB,UAAU,GAAG;MACfC,OAAO,EAAG;QACN,cAAc,EAAG;MACrB;IACJ,CAAC;IACD;IACA/B,KAAK,CAACgC,IAAI,CAAC,4BAA4B,EAAEH,QAAQ,EAAEC,UAAU,CAAC,CAC7DG,IAAI,CAAEC,QAAQ,IAAK;MAChB;MACArB,eAAe,CAACqB,QAAQ,CAACC,IAAI,CAAC,WAAW,CAAC,CAAC;MAC3C;MACApB,kBAAkB,CAACmB,QAAQ,CAACC,IAAI,CAAC,UAAU,CAAC,CAAC;MAC7C;MACAlB,UAAU,CAACiB,QAAQ,CAACC,IAAI,CAAC,WAAW,CAAC,CAAC;MACtCT,OAAO,CAACC,GAAG,CAACO,QAAQ,CAACC,IAAI,CAAC;MAC1BhB,UAAU,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC,CAACiB,KAAK,CAAEC,KAAK,IAAK;MAChBX,OAAO,CAACC,GAAG,CAACU,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3B;IACAV,mBAAmB,CAAC,CAAC;IACrB;IACA,MAAMW,WAAW,GAAGC,MAAM,CAACC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC;IACvCF,WAAW,CAACG,KAAK,GAAG,mCAAmC;IACvDH,WAAW,CAACI,IAAI,CAACC,SAAS,GAAG,6BAA6B;IAC1D;IACA7C,QAAQ,CAAC8C,MAAM,eAAC1C,OAAA,CAACF,WAAW;MAAC6C,IAAI,EAAIlC,aAAc;MAACE,gBAAgB,EAAIA,gBAAiB;MAACiC,WAAW,EAAI/B;IAAS;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAAEZ,WAAW,CAACa,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;EAEtK,CAAC;;EAED;EACA,oBACIlD,OAAA;IAAKmD,SAAS,EAAG,iBAAiB;IAACC,KAAK,EAAG,kEAAkE;IAAAC,QAAA,gBAC3GrD,OAAA;MAAGmD,SAAS,EAAG,oBAAoB;MAACC,KAAK,EAAG,WAAW;MAAAC,QAAA,EAAC;IAAuE;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACnIhD,OAAA;MAAUmD,SAAS,EAAG,iBAAiB;MAACG,IAAI,EAAG,UAAU;MAACC,YAAY,EAAG,4BAA4B;MAACC,QAAQ,EAAIvC,aAAc;MAACmC,KAAK,EAAG;IAA6G;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAW,CAAC,eAClQhD,OAAA;MAAKmD,SAAS,EAAG,kBAAkB;MAACC,KAAK,EAAG,2DAA2D;MAAAC,QAAA,gBACrGrD,OAAA;QAAOoD,KAAK,EAAG,EAAE;QAAAC,QAAA,EAAC;MAAmB;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eAC3ChD,OAAA;QAAQyD,IAAI,EAAG,mBAAmB;QAACC,EAAE,EAAG,mBAAmB;QAACH,YAAY,EAAG,SAAS;QAACC,QAAQ,EAAInC,WAAY;QAAC+B,KAAK,EAAG,sGAAsG;QAAAC,QAAA,gBAC1NrD,OAAA;UAAAqD,QAAA,EAAwB;QAAO,GAAjB,SAAS;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAgB,CAAC,eACxChD,OAAA;UAAAqD,QAAA,EAAyB;QAAQ,GAAnB,UAAU;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAiB,CAAC,eAC1ChD,OAAA;UAAAqD,QAAA,EAA2B;QAAU,GAAvB,YAAY;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAmB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eACNhD,OAAA;MAAQmD,SAAS,EAAG,kBAAkB;MAACQ,OAAO,EAAIxB,gBAAiB;MAACiB,KAAK,EAAG,sGAAsG;MAAAC,QAAA,EAAC;IAAgB;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGzM,CAAC;AAEd;AAAC5C,EAAA,CArFuBD,YAAY;AAAAyD,EAAA,GAAZzD,YAAY;AAAA,IAAAyD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}